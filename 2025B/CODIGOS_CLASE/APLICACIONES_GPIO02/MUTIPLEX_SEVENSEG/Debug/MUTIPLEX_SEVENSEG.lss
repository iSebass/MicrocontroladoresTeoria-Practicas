
MUTIPLEX_SEVENSEG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002d2  00000366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010c  0080010c  00000372  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b39  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f6  00000000  00000000  00000f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052d  00000000  00000000  00001863  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d5  00000000  00000000  00001df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000127  00000000  00000000  000022cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000023f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ed       	ldi	r30, 0xD2	; 210
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	04 c1       	rjmp	.+520    	; 0x2ce <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
int numero = 2108;
int dig_unidad, dig_decena, dig_centena, dig_unidad_mil;
int resi;

int main(void){
    for(int i=0; i<=3; i++){
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	0d c0       	rjmp	.+26     	; 0xe8 <main+0x20>
		DDRD |= (1<<i);
  ce:	4a b1       	in	r20, 0x0a	; 10
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 2e       	mov	r0, r18
  d6:	02 c0       	rjmp	.+4      	; 0xdc <main+0x14>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	0a 94       	dec	r0
  de:	e2 f7       	brpl	.-8      	; 0xd8 <main+0x10>
  e0:	84 2b       	or	r24, r20
  e2:	8a b9       	out	0x0a, r24	; 10
int numero = 2108;
int dig_unidad, dig_decena, dig_centena, dig_unidad_mil;
int resi;

int main(void){
    for(int i=0; i<=3; i++){
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
  e8:	24 30       	cpi	r18, 0x04	; 4
  ea:	31 05       	cpc	r19, r1
  ec:	84 f3       	brlt	.-32     	; 0xce <main+0x6>
		DDRD |= (1<<i);
	}
	SevenSegInit();
  ee:	56 d0       	rcall	.+172    	; 0x19c <SevenSegInit>

    while(1){
		dig_unidad_mil = numero / 1000;
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f8:	68 ee       	ldi	r22, 0xE8	; 232
  fa:	73 e0       	ldi	r23, 0x03	; 3
  fc:	c1 d0       	rcall	.+386    	; 0x280 <__divmodhi4>
  fe:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <dig_unidad_mil+0x1>
 102:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <dig_unidad_mil>
		resi = numero%1000;
		
		dig_centena = resi / 100;
 106:	64 e6       	ldi	r22, 0x64	; 100
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	ba d0       	rcall	.+372    	; 0x280 <__divmodhi4>
 10c:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <dig_centena+0x1>
 110:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <dig_centena>
		resi = resi % 100;
 114:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <resi+0x1>
 118:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <resi>
		
		dig_decena = resi / 10;
 11c:	6a e0       	ldi	r22, 0x0A	; 10
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	af d0       	rcall	.+350    	; 0x280 <__divmodhi4>
 122:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <__data_end+0x1>
 126:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <__data_end>
		dig_unidad = resi % 10;
 12a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <dig_unidad+0x1>
 12e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <dig_unidad>
		
		PORTD = UNIDADES_MIL;
 132:	8e ef       	ldi	r24, 0xFE	; 254
 134:	8b b9       	out	0x0b, r24	; 11
		DecoCC_(dig_unidad_mil);
 136:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <dig_unidad_mil>
 13a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <dig_unidad_mil+0x1>
 13e:	44 d0       	rcall	.+136    	; 0x1c8 <DecoCC_>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	8f e4       	ldi	r24, 0x4F	; 79
 142:	93 ec       	ldi	r25, 0xC3	; 195
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <main+0x7c>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x82>
 14a:	00 00       	nop
		_delay_ms(te);
		
		PORTD = CENTENAS;
 14c:	8d ef       	ldi	r24, 0xFD	; 253
		DecoCC_(dig_centena);
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <dig_centena>
 154:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <dig_centena+0x1>
 158:	37 d0       	rcall	.+110    	; 0x1c8 <DecoCC_>
 15a:	8f e4       	ldi	r24, 0x4F	; 79
 15c:	93 ec       	ldi	r25, 0xC3	; 195
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0x96>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0x9c>
 164:	00 00       	nop
		_delay_ms(te);
		
		PORTD = DECENAS;
 166:	8b ef       	ldi	r24, 0xFB	; 251
		DecoCC_(dig_decena);
 168:	8b b9       	out	0x0b, r24	; 11
 16a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 16e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 172:	2a d0       	rcall	.+84     	; 0x1c8 <DecoCC_>
 174:	8f e4       	ldi	r24, 0x4F	; 79
 176:	93 ec       	ldi	r25, 0xC3	; 195
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0xb0>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0xb6>
		_delay_ms(te);
		
		PORTD = UNIDADES;
 17e:	00 00       	nop
 180:	87 ef       	ldi	r24, 0xF7	; 247
		DecoCC_(dig_unidad);
 182:	8b b9       	out	0x0b, r24	; 11
 184:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <dig_unidad>
 188:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <dig_unidad+0x1>
 18c:	1d d0       	rcall	.+58     	; 0x1c8 <DecoCC_>
 18e:	8f e4       	ldi	r24, 0x4F	; 79
 190:	93 ec       	ldi	r25, 0xC3	; 195
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0xca>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0xd0>
 198:	00 00       	nop
 19a:	aa cf       	rjmp	.-172    	; 0xf0 <main+0x28>

0000019c <SevenSegInit>:
	SEGE_DDR |= (1<<SEGE);
	SEGF_DDR |= (1<<SEGF);
	SEGG_DDR |= (1<<SEGG);	
}

void DecoAC_(int val){
 19c:	84 b1       	in	r24, 0x04	; 4
 19e:	81 60       	ori	r24, 0x01	; 1
 1a0:	84 b9       	out	0x04, r24	; 4
 1a2:	84 b1       	in	r24, 0x04	; 4
 1a4:	82 60       	ori	r24, 0x02	; 2
 1a6:	84 b9       	out	0x04, r24	; 4
 1a8:	84 b1       	in	r24, 0x04	; 4
 1aa:	84 60       	ori	r24, 0x04	; 4
 1ac:	84 b9       	out	0x04, r24	; 4
 1ae:	84 b1       	in	r24, 0x04	; 4
 1b0:	88 60       	ori	r24, 0x08	; 8
 1b2:	84 b9       	out	0x04, r24	; 4
 1b4:	84 b1       	in	r24, 0x04	; 4
 1b6:	80 61       	ori	r24, 0x10	; 16
 1b8:	84 b9       	out	0x04, r24	; 4
 1ba:	84 b1       	in	r24, 0x04	; 4
 1bc:	80 62       	ori	r24, 0x20	; 32
 1be:	84 b9       	out	0x04, r24	; 4
 1c0:	84 b1       	in	r24, 0x04	; 4
 1c2:	80 64       	ori	r24, 0x40	; 64
 1c4:	84 b9       	out	0x04, r24	; 4
 1c6:	08 95       	ret

000001c8 <DecoCC_>:
	
	
}
void DecoCC_(int val){
	
	if( (DecoCC[val] & 1 ) == 0) SEGA_PORT &= ~(1<<SEGA); else SEGA_PORT |= (1<<SEGA);
 1c8:	fc 01       	movw	r30, r24
 1ca:	ee 5f       	subi	r30, 0xFE	; 254
 1cc:	fe 4f       	sbci	r31, 0xFE	; 254
 1ce:	20 81       	ld	r18, Z
 1d0:	20 fd       	sbrc	r18, 0
 1d2:	04 c0       	rjmp	.+8      	; 0x1dc <DecoCC_+0x14>
 1d4:	25 b1       	in	r18, 0x05	; 5
 1d6:	2e 7f       	andi	r18, 0xFE	; 254
 1d8:	25 b9       	out	0x05, r18	; 5
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <DecoCC_+0x1a>
 1dc:	25 b1       	in	r18, 0x05	; 5
 1de:	21 60       	ori	r18, 0x01	; 1
 1e0:	25 b9       	out	0x05, r18	; 5
	if( (DecoCC[val] & 2 ) == 0) SEGB_PORT &= ~(1<<SEGB); else SEGB_PORT |= (1<<SEGB);
 1e2:	fc 01       	movw	r30, r24
 1e4:	ee 5f       	subi	r30, 0xFE	; 254
 1e6:	fe 4f       	sbci	r31, 0xFE	; 254
 1e8:	20 81       	ld	r18, Z
 1ea:	21 fd       	sbrc	r18, 1
 1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <DecoCC_+0x2e>
 1ee:	25 b1       	in	r18, 0x05	; 5
 1f0:	2d 7f       	andi	r18, 0xFD	; 253
 1f2:	25 b9       	out	0x05, r18	; 5
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <DecoCC_+0x34>
 1f6:	25 b1       	in	r18, 0x05	; 5
 1f8:	22 60       	ori	r18, 0x02	; 2
 1fa:	25 b9       	out	0x05, r18	; 5
	if( (DecoCC[val] & 4 ) == 0) SEGC_PORT &= ~(1<<SEGC); else SEGC_PORT |= (1<<SEGC);
 1fc:	fc 01       	movw	r30, r24
 1fe:	ee 5f       	subi	r30, 0xFE	; 254
 200:	fe 4f       	sbci	r31, 0xFE	; 254
 202:	20 81       	ld	r18, Z
 204:	22 fd       	sbrc	r18, 2
 206:	04 c0       	rjmp	.+8      	; 0x210 <DecoCC_+0x48>
 208:	25 b1       	in	r18, 0x05	; 5
 20a:	2b 7f       	andi	r18, 0xFB	; 251
 20c:	25 b9       	out	0x05, r18	; 5
 20e:	03 c0       	rjmp	.+6      	; 0x216 <DecoCC_+0x4e>
 210:	25 b1       	in	r18, 0x05	; 5
 212:	24 60       	ori	r18, 0x04	; 4
 214:	25 b9       	out	0x05, r18	; 5
	if( (DecoCC[val] & 8 ) == 0) SEGD_PORT &= ~(1<<SEGD); else SEGD_PORT |= (1<<SEGD);
 216:	fc 01       	movw	r30, r24
 218:	ee 5f       	subi	r30, 0xFE	; 254
 21a:	fe 4f       	sbci	r31, 0xFE	; 254
 21c:	20 81       	ld	r18, Z
 21e:	23 fd       	sbrc	r18, 3
 220:	04 c0       	rjmp	.+8      	; 0x22a <DecoCC_+0x62>
 222:	25 b1       	in	r18, 0x05	; 5
 224:	27 7f       	andi	r18, 0xF7	; 247
 226:	25 b9       	out	0x05, r18	; 5
 228:	03 c0       	rjmp	.+6      	; 0x230 <DecoCC_+0x68>
 22a:	25 b1       	in	r18, 0x05	; 5
 22c:	28 60       	ori	r18, 0x08	; 8
 22e:	25 b9       	out	0x05, r18	; 5
	if( (DecoCC[val] & 16) == 0) SEGE_PORT &= ~(1<<SEGE); else SEGE_PORT |= (1<<SEGE);
 230:	fc 01       	movw	r30, r24
 232:	ee 5f       	subi	r30, 0xFE	; 254
 234:	fe 4f       	sbci	r31, 0xFE	; 254
 236:	20 81       	ld	r18, Z
 238:	24 fd       	sbrc	r18, 4
 23a:	04 c0       	rjmp	.+8      	; 0x244 <DecoCC_+0x7c>
 23c:	25 b1       	in	r18, 0x05	; 5
 23e:	2f 7e       	andi	r18, 0xEF	; 239
 240:	25 b9       	out	0x05, r18	; 5
 242:	03 c0       	rjmp	.+6      	; 0x24a <DecoCC_+0x82>
 244:	25 b1       	in	r18, 0x05	; 5
 246:	20 61       	ori	r18, 0x10	; 16
 248:	25 b9       	out	0x05, r18	; 5
	if( (DecoCC[val] & 32) == 0) SEGF_PORT &= ~(1<<SEGF); else SEGF_PORT |= (1<<SEGF);
 24a:	fc 01       	movw	r30, r24
 24c:	ee 5f       	subi	r30, 0xFE	; 254
 24e:	fe 4f       	sbci	r31, 0xFE	; 254
 250:	20 81       	ld	r18, Z
 252:	25 fd       	sbrc	r18, 5
 254:	04 c0       	rjmp	.+8      	; 0x25e <DecoCC_+0x96>
 256:	25 b1       	in	r18, 0x05	; 5
 258:	2f 7d       	andi	r18, 0xDF	; 223
 25a:	25 b9       	out	0x05, r18	; 5
 25c:	03 c0       	rjmp	.+6      	; 0x264 <DecoCC_+0x9c>
 25e:	25 b1       	in	r18, 0x05	; 5
 260:	20 62       	ori	r18, 0x20	; 32
 262:	25 b9       	out	0x05, r18	; 5
	if( (DecoCC[val] & 64) == 0) SEGG_PORT &= ~(1<<SEGG); else SEGG_PORT |= (1<<SEGG);
 264:	fc 01       	movw	r30, r24
 266:	ee 5f       	subi	r30, 0xFE	; 254
 268:	fe 4f       	sbci	r31, 0xFE	; 254
 26a:	80 81       	ld	r24, Z
 26c:	86 fd       	sbrc	r24, 6
 26e:	04 c0       	rjmp	.+8      	; 0x278 <DecoCC_+0xb0>
 270:	85 b1       	in	r24, 0x05	; 5
 272:	8f 7b       	andi	r24, 0xBF	; 191
 274:	85 b9       	out	0x05, r24	; 5
 276:	08 95       	ret
 278:	85 b1       	in	r24, 0x05	; 5
 27a:	80 64       	ori	r24, 0x40	; 64
 27c:	85 b9       	out	0x05, r24	; 5
 27e:	08 95       	ret

00000280 <__divmodhi4>:
 280:	97 fb       	bst	r25, 7
 282:	07 2e       	mov	r0, r23
 284:	16 f4       	brtc	.+4      	; 0x28a <__divmodhi4+0xa>
 286:	00 94       	com	r0
 288:	06 d0       	rcall	.+12     	; 0x296 <__divmodhi4_neg1>
 28a:	77 fd       	sbrc	r23, 7
 28c:	08 d0       	rcall	.+16     	; 0x29e <__divmodhi4_neg2>
 28e:	0b d0       	rcall	.+22     	; 0x2a6 <__udivmodhi4>
 290:	07 fc       	sbrc	r0, 7
 292:	05 d0       	rcall	.+10     	; 0x29e <__divmodhi4_neg2>
 294:	3e f4       	brtc	.+14     	; 0x2a4 <__divmodhi4_exit>

00000296 <__divmodhi4_neg1>:
 296:	90 95       	com	r25
 298:	81 95       	neg	r24
 29a:	9f 4f       	sbci	r25, 0xFF	; 255
 29c:	08 95       	ret

0000029e <__divmodhi4_neg2>:
 29e:	70 95       	com	r23
 2a0:	61 95       	neg	r22
 2a2:	7f 4f       	sbci	r23, 0xFF	; 255

000002a4 <__divmodhi4_exit>:
 2a4:	08 95       	ret

000002a6 <__udivmodhi4>:
 2a6:	aa 1b       	sub	r26, r26
 2a8:	bb 1b       	sub	r27, r27
 2aa:	51 e1       	ldi	r21, 0x11	; 17
 2ac:	07 c0       	rjmp	.+14     	; 0x2bc <__udivmodhi4_ep>

000002ae <__udivmodhi4_loop>:
 2ae:	aa 1f       	adc	r26, r26
 2b0:	bb 1f       	adc	r27, r27
 2b2:	a6 17       	cp	r26, r22
 2b4:	b7 07       	cpc	r27, r23
 2b6:	10 f0       	brcs	.+4      	; 0x2bc <__udivmodhi4_ep>
 2b8:	a6 1b       	sub	r26, r22
 2ba:	b7 0b       	sbc	r27, r23

000002bc <__udivmodhi4_ep>:
 2bc:	88 1f       	adc	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	5a 95       	dec	r21
 2c2:	a9 f7       	brne	.-22     	; 0x2ae <__udivmodhi4_loop>
 2c4:	80 95       	com	r24
 2c6:	90 95       	com	r25
 2c8:	bc 01       	movw	r22, r24
 2ca:	cd 01       	movw	r24, r26
 2cc:	08 95       	ret

000002ce <_exit>:
 2ce:	f8 94       	cli

000002d0 <__stop_program>:
 2d0:	ff cf       	rjmp	.-2      	; 0x2d0 <__stop_program>
